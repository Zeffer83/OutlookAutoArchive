name: Auto Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: "Version number (e.g., 2.9.6)"
        required: true
        default: "2.9.6"
      create_tag:
        description: "Create and push a new tag"
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "VERSION=${{ github.event.inputs.version }}" >> $env:GITHUB_ENV
            echo "version=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
          } else {
            # Extract version from tag (remove 'v' prefix)
            $VERSION = "${{ github.ref }}" -replace "refs/tags/v", ""
            echo "VERSION=$VERSION" >> $env:GITHUB_ENV
            echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          }

             # Note: Tag creation removed due to permission issues
       # To create a release, manually create a tag: git tag -a v2.9.6 -m "Release v2.9.6" && git push origin v2.9.6

      - name: Check PowerShell environment
        run: |
          # Check PowerShell version and environment
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"
          Write-Host "OS: $($PSVersionTable.OS)"
          Write-Host "Current Directory: $(Get-Location)"
          Write-Host "Execution Policy: $(Get-ExecutionPolicy -Scope CurrentUser)"

      - name: Install PowerShell modules
        run: |
          # Set execution policy to allow module installation
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

          # Install required PowerShell modules
          try {
            Write-Host "Installing PS2EXE module..."
            Install-Module -Name PS2EXE -Force -Scope CurrentUser -ErrorAction Stop
            Write-Host "‚úì PS2EXE module installed successfully"
          } catch {
            Write-Error "‚ùå Failed to install PS2EXE module: $($_.Exception.Message)"
            exit 1
          }

          try {
            Write-Host "Installing PSScriptAnalyzer module..."
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -ErrorAction Stop
            Write-Host "‚úì PSScriptAnalyzer module installed successfully"
          } catch {
            Write-Error "‚ùå Failed to install PSScriptAnalyzer module: $($_.Exception.Message)"
            exit 1
          }

          # Verify modules are available
          if (-not (Get-Module -ListAvailable -Name PS2EXE)) {
            Write-Error "‚ùå PS2EXE module not found after installation"
            exit 1
          }

          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
            Write-Error "‚ùå PSScriptAnalyzer module not found after installation"
            exit 1
          }

          Write-Host "‚úì All required modules verified"

      - name: Validate PowerShell script
        run: |
          # Run PSScriptAnalyzer to check for issues
          try {
            Write-Host "Running PSScriptAnalyzer..."
            $results = Invoke-ScriptAnalyzer -Path "OutlookAutoArchive.ps1" -Settings PSGallery -ErrorAction Stop
            if ($results.Count -gt 0) {
              Write-Host "Script analysis found issues:"
              $results | Format-Table -AutoSize
              exit 1
            }
            Write-Host "‚úì Script validation passed!"
          } catch {
            Write-Error "‚ùå Script validation failed: $($_.Exception.Message)"
            exit 1
          }

      - name: Verify icon file
        run: |
          # Check if icon file exists and is valid
          if (Test-Path "icon.ico") {
            $iconSize = (Get-Item "icon.ico").Length
            Write-Host "‚úì Icon file found: icon.ico ($([math]::Round($iconSize/1KB,2)) KB)"
          } else {
            Write-Error "‚ùå Icon file not found: icon.ico"
            exit 1
          }

      - name: Build main executable
        run: |
          # Build the main executable with version info
          $version = "$env:VERSION"
          Write-Host "Building OutlookAutoArchive.exe version $version"

          # Ensure icon file path is absolute
          $iconPath = (Resolve-Path "icon.ico").Path
          Write-Host "Using icon file: $iconPath"

          try {
            ps2exe -InputFile "OutlookAutoArchive.ps1" `
                   -OutputFile "OutlookAutoArchive.exe" `
                   -Version "$version" `
                   -Title "Outlook Auto Archive" `
                   -Description "Automatic email archiving functionality" `
                   -Company "Ryan Zeffiretti" `
                   -Product "Outlook Auto Archive" `
                   -Copyright "Copyright (c) 2025 Ryan Zeffiretti. Licensed under MIT License." `
                   -Trademark "Outlook Auto Archive" `
                   -IconFile "$iconPath" `
                   -NoConsole `
                   -RequireAdmin `
                   -ErrorAction Stop
            
            Write-Host "‚úì Main executable build completed"
          } catch {
            Write-Error "‚ùå Failed to build main executable: $($_.Exception.Message)"
            exit 1
          }

      - name: Build setup executable
        run: |
          # Build the setup executable
          Write-Host "Building setup_task_scheduler.exe"

          # Use the same absolute icon path
          $iconPath = (Resolve-Path "icon.ico").Path
          Write-Host "Using icon file: $iconPath"

          try {
            ps2exe -InputFile "setup_task_scheduler.ps1" `
                   -OutputFile "setup_task_scheduler.exe" `
                   -Version "$env:VERSION" `
                   -Title "Outlook Auto Archive Setup" `
                   -Description "Task scheduler setup utility" `
                   -Company "Ryan Zeffiretti" `
                   -Product "Outlook Auto Archive" `
                   -Copyright "Copyright (c) 2025 Ryan Zeffiretti. Licensed under MIT License." `
                   -IconFile "$iconPath" `
                   -NoConsole `
                   -RequireAdmin `
                   -ErrorAction Stop
            
            Write-Host "‚úì Setup executable build completed"
          } catch {
            Write-Error "‚ùå Failed to build setup executable: $($_.Exception.Message)"
            exit 1
          }

      - name: Verify executables
        run: |
          # Check if executables were created successfully
          if (Test-Path "OutlookAutoArchive.exe") {
            $size = (Get-Item "OutlookAutoArchive.exe").Length
            Write-Host "‚úì OutlookAutoArchive.exe created successfully ($([math]::Round($size/1KB,2)) KB)"
            
            # Verify icon is embedded (check if file has icon resource)
            try {
              $exeInfo = Get-ItemProperty "OutlookAutoArchive.exe"
              Write-Host "‚úì Executable metadata verified"
            } catch {
              Write-Warning "‚ö†Ô∏è Could not verify executable metadata"
            }
          } else {
            Write-Error "‚ùå OutlookAutoArchive.exe was not created"
            exit 1
          }

          if (Test-Path "setup_task_scheduler.exe") {
            $size = (Get-Item "setup_task_scheduler.exe").Length
            Write-Host "‚úì setup_task_scheduler.exe created successfully ($([math]::Round($size/1KB,2)) KB)"
            
            # Verify icon is embedded
            try {
              $exeInfo = Get-ItemProperty "setup_task_scheduler.exe"
              Write-Host "‚úì Setup executable metadata verified"
            } catch {
              Write-Warning "‚ö†Ô∏è Could not verify setup executable metadata"
            }
          } else {
            Write-Error "‚ùå setup_task_scheduler.exe was not created"
            exit 1
          }

      - name: Create release package
        run: |
          # Create a release directory with all necessary files
          $releaseDir = "OutlookAutoArchive-v$env:VERSION"
          New-Item -ItemType Directory -Path $releaseDir -Force

          # Copy files to release directory
          Copy-Item "OutlookAutoArchive.exe" $releaseDir/
          Copy-Item "setup_task_scheduler.exe" $releaseDir/
          Copy-Item "OutlookAutoArchive.ps1" $releaseDir/
          Copy-Item "setup_task_scheduler.ps1" $releaseDir/
          Copy-Item "icon.ico" $releaseDir/
          Copy-Item "README.md" $releaseDir/
          Copy-Item "LICENSE" $releaseDir/
          Copy-Item "CHANGELOG.md" $releaseDir/

          # Create a simple config example
          $configExample = '{"DryRun": true,"ArchiveFolders": [],"LogPath": "","InstallPath": ""}'
          $configExample | Out-File -FilePath "$releaseDir/config_example.json" -Encoding UTF8

          # Create ZIP archive
          Compress-Archive -Path $releaseDir -DestinationPath "$releaseDir.zip" -Force

          Write-Host "‚úì Release package created: $releaseDir.zip"

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            OutlookAutoArchive.exe
            setup_task_scheduler.exe
            OutlookAutoArchive.ps1
            setup_task_scheduler.ps1
            icon.ico
            README.md
            LICENSE
            CHANGELOG.md
            config_example.json
            OutlookAutoArchive-v${{ steps.version.outputs.version }}.zip
          body: |
            ## Outlook Auto Archive v${{ steps.version.outputs.version }}

            ### üì¶ What's Included
            - **OutlookAutoArchive.exe** - Main application (compiled from PowerShell)
            - **setup_task_scheduler.exe** - Task scheduler setup utility
            - **OutlookAutoArchive.ps1** - Source PowerShell script
            - **setup_task_scheduler.ps1** - Setup script source
            - **icon.ico** - Application icon
            - **config_example.json** - Configuration template
            - **Complete package ZIP** - All files bundled together

            ### üöÄ Quick Start
            1. Download and extract the files
            2. Run `OutlookAutoArchive.exe` for first-time setup
            3. Follow the interactive setup process
            4. Configure your archive preferences

            ### üìã System Requirements
            - Windows 10/11
            - Microsoft Outlook (desktop version)
            - PowerShell 5.1 or later

            ### üîß Features
            - Automatic email archiving
            - Gmail label support
            - Scheduled task integration
            - Dry-run mode for testing
            - Comprehensive logging

            ### üìÑ Documentation
            See README.md for detailed installation and usage instructions.

            ### üìù Changelog
            See CHANGELOG.md for version history and changes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-v${{ steps.version.outputs.version }}
          path: |
            OutlookAutoArchive.exe
            setup_task_scheduler.exe
            OutlookAutoArchive.ps1
            setup_task_scheduler.ps1
            icon.ico
            config_example.json
            OutlookAutoArchive-v${{ steps.version.outputs.version }}.zip
          retention-days: 30

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
          echo "- OutlookAutoArchive.exe" >> $GITHUB_STEP_SUMMARY
          echo "- setup_task_scheduler.exe" >> $GITHUB_STEP_SUMMARY
          echo "- Complete release package ZIP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the executables on a clean system" >> $GITHUB_STEP_SUMMARY
          echo "2. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Create a GitHub release (if not auto-created)" >> $GITHUB_STEP_SUMMARY
